<?xml version="1.0" encoding="utf-8"?>
<panel:AbstractCEPWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
						 xmlns:s="library://ns.adobe.com/flex/spark"
						 xmlns:mx="library://ns.adobe.com/flex/mx"
						 xmlns:panel="com.linkage.module.topo.framework.view.component.*"
						 minHeight="24"
						 width="340"
						 title="{_title}"
						 close="closePanel()"
						 dragable="true"
						 maximizable="false">
	<panel:layout>
		<s:VerticalLayout/>
	</panel:layout>
	<!--
		 ***************************************
		 GIS图片对象(基于形状对象实现)
		 @author duangr (65250)
		 @version 1.0
		 @date 2012-6-20
		 @langversion 3.0
		 @playerversion Flash 11
		 @productversion Flex 4
		 @copyright Ailk NBS-Network Mgt. RD Dept.
		 ***************************************
	-->

	<fx:Script>
		<![CDATA[
			import com.linkage.module.topo.framework.Constants;
			import com.linkage.module.topo.framework.assets.TopoIcons;
			import com.linkage.module.topo.framework.controller.event.TopoEvent;
			import com.linkage.module.topo.framework.core.model.element.plane.ITPShape;
			import com.linkage.module.topo.framework.core.model.element.plane.TPShape;
			import com.linkage.module.topo.framework.core.parser.ElementProperties;
			import com.linkage.module.topo.framework.data.IDataSource;
			import com.linkage.module.topo.framework.util.DataUtil;
			import com.linkage.module.topo.framework.util.ImageBuffer;
			import com.linkage.module.topo.framework.util.MessageUtil;
			import com.linkage.module.topo.framework.util.TopoUtil;
			import com.linkage.module.topo.framework.util.loading.ILoadingInfo;
			import com.linkage.module.topo.framework.util.loading.LoadingManager;
			import com.linkage.module.topo.framework.view.component.TopoCanvas;
			import com.linkage.module.topo.framework.view.component.panel.spareparts.IconChooser;
			import com.linkage.system.logging.ILogger;
			import com.linkage.system.logging.Log;
			import com.linkage.system.structure.map.IMap;

			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.utils.StringUtil;
			private var log:ILogger = Log.getLoggerByClass(PicModifyPanel);
			// 图标缓存类
			private var _imageBuffer:ImageBuffer = ImageBuffer.getInstance();
			// loading
			private var _loading:ILoadingInfo = null;

			// 是否已经创建完成
			private var _creationComplete:Boolean = false;
			[Bindable]
			private var _title:String = null;
			// 数据源
			private var _dataSource:IDataSource = null;
			// 远程填充图片的上下文
			private var _iconFillContext:String = null;
			// 相对工程的图片填充路径(需要去远程服务端获取图片名称)
			private var _iconFillPath:String = null;
			// 正在编辑的形状对象(为空代表新增)
			private var _modifyShape:ITPShape = null;

			// 形状创建的位置
			private var _creationPoint:Point = new Point();

			// 图标选择面板
			private var _iconChooser:IconChooser = null;


			// ------ 默认值 -----
			[Bindable]
			private var _currentShadowEnable:Boolean = true;
			// 当前选中图片的名称
			[Bindable]
			private var _currentFillImageName:String = null;

			// 关闭面板
			private function closePanel():void
			{
				hide();
			}

			/**
			 * 注入数据源
			 */
			public function set dataSource(value:IDataSource):void
			{
				_dataSource = value;
			}


			/**
			 * 远程填充图片的上下文
			 */
			public function set iconFillContext(value:String):void
			{
				_iconFillContext = value;
				// 截取掉工程名称,比如: /cms/cms/webtopo/images/theme/fillimage --> /cms/webtopo/images/theme/fillimage
				_iconFillPath = _iconFillContext.substr(_iconFillContext.indexOf("/", 1));
			}

			/**
			 * 注入画布
			 */
			override public function set topoCanvas(value:TopoCanvas):void
			{
				super.topoCanvas = value;
				_loading = LoadingManager.getInstance().loadingInfo;

				// 新增
				_topoCanvas.addEventListener(TopoEvent.CREATE_SHAPE_PIC, function(event:TopoEvent):void
					{
						showPanel(event);
					});
				// 编辑
				_topoCanvas.addEventListener(TopoEvent.MODIFY_SHAPE_PIC, function(event:TopoEvent):void
					{
						showPanel(event, event.feature.element as ITPShape);
					});

				// 复制
				_topoCanvas.addEventListener(TopoEvent.COPY_SHAPE_PIC, function(event:TopoEvent):void
					{
						saveCopy(event.feature.element as ITPShape);
					});
			}

			// 展示元素的信息
			private function showPanel(event:TopoEvent, tpShape:ITPShape = null):void
			{
				show();
				if (_creationComplete == false)
				{
					_creationComplete = true;
					log.debug("首次打开图片对象面板,开始初始化...");
					_iconChooser = new IconChooser();
					_iconChooser.iconContext = _iconFillContext;

					// 查询图标数据
					_dataSource.listPicNames(_iconFillPath, function(data:XML):void
						{
							var iconList:XMLList = data.child("pic");
							_iconChooser.iconList = new XMLListCollection(iconList);

						});
					// 图标面板选中具体图标
					_iconChooser.initPanel(function(selectedIcon:Object):void
						{
							_currentFillImageName = selectedIcon.icon;
							_iconChooser.hide();
						});
				}
				_modifyShape = tpShape;
				if (_modifyShape)
				{
					_title = "编辑图片对象";
					shapeWidth.text = String(_modifyShape.width);
					shapeHeight.text = String(_modifyShape.height);
					shapeName.text = _modifyShape.name;
					setLabelLayoutProperty(_modifyShape.labelLayout);
					setShapeTypeProperty(_modifyShape.shapeType);
					_currentFillImageName = _modifyShape.fillImage;
					borderWidth.value = _modifyShape.borderWidth;
					borderColor.selectedColor = _modifyShape.borderColor;
					borderAlpha.value = _modifyShape.borderAlpha;
					_currentShadowEnable = _modifyShape.shadowEnable == 1 ? true : false;
				}
				else
				{
					_title = "创建图片对象";
					_creationPoint.x = event.getProperty("x");
					_creationPoint.y = event.getProperty("y");
					shapeWidth.text = event.getProperty("width");
					shapeHeight.text = event.getProperty("height");
					shapeName.text = "";
					setLabelLayoutProperty(ElementProperties.DEFAULT_LABEL_LAYOUT);
					setShapeTypeProperty(ElementProperties.DEFAULT_SHAPE_TYPE);
					_currentFillImageName = "";
					borderWidth.value = ElementProperties.DEFAULT_SHAPE_BORDER_WIDTH;
					borderColor.selectedColor = ElementProperties.DEFAULT_SHAPE_BORDER_COLOR;
					borderAlpha.value = ElementProperties.DEFAULT_SHAPE_BORDER_ALPHA;
					_currentShadowEnable = ElementProperties.DEFAULT_SHAPE_SHADOW_ENABLE == 1 ? true : false;
				}
			}




			// 设置Label布局位置
			private function setLabelLayoutProperty(value:String):void
			{
				switch (value)
				{
					case ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_TOP:
						labelLayout.selectedIndex = 0;
						break;
					case ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_LEFT:
						labelLayout.selectedIndex = 2;
						break;
					case ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_RIGHT:
						labelLayout.selectedIndex = 3;
						break;
					case ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_HIDE:
						labelLayout.selectedIndex = 4;
						break;
					case ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_BOTTOM:
					default:
						labelLayout.selectedIndex = 1;
						break;
				}
			}

			// 设置形状类型的属性值
			private function setShapeTypeProperty(value:String):void
			{
				switch (value)
				{
					case ElementProperties.PROPERTYVALUE_SHAPE_TYPE_TRAPEZIUM: // 倾斜,梯形
						shapeType.selectedIndex = 1;
						break;
					case ElementProperties.PROPERTYVALUE_SHAPE_TYPE_RECTANGLE: // 正常,矩形
					default:
						shapeType.selectedIndex = 0;
						break;
				}
			}

			// 显示更多的图标
			private function showMoreIcon_clickHandler(event:MouseEvent):void
			{
				_iconChooser.show(_topoCanvas, true);
			}

			/********************* 保存操作 **********************/

			// 保存按钮点击
			private function save_clickHandler(event:MouseEvent):void
			{
				if (!checkForm())
				{
					return;
				}
				if (_modifyShape)
				{
					saveModify(_modifyShape);
				}
				else
				{
					saveCreate();
				}
			}

			// 验证表单
			private function checkForm():Boolean
			{
				// 检查验证器是否通过
				return TopoUtil.checkValidators([fillImageNameValidator, nameValidator, widthValidator, heightValidator]);
			}

			// 新创建后保存
			private function saveCreate():void
			{
				var shape:ITPShape = new TPShape();
				shape.visible = 1;
				shape.zindex = -1;
				// 画布的坐标转换为入库的坐标
				shape.x = _creationPoint.x - _topoCanvas.dataBounds.offsetX;
				shape.y = _creationPoint.y - _topoCanvas.dataBounds.offsetY;
				commitFormProperties(shape);

				var data:String = DataUtil.buildMapXML(Constants.XML_KEY_ELEMENTXML, DataUtil.buildOutputObjects([shape], _topoCanvas.parserFactory));
				data += DataUtil.buildMapXML(Constants.XML_KEY_PID, _topoCanvas.topoId);
				data = DataUtil.buildXML(Constants.TP_MC_ADD_OBJECT, data);
				log.debug("saveCreate: {0}", data);
				_loading.loadingStart();
				_dataSource.notify(_topoCanvas.topoName, data, function(result:String):void
					{
						_loading.loadingEnd();
						var map:IMap = DataUtil.getActionResultMap(new XML(result));
						if (map.get(Constants.XML_KEY_SUCCESS) == "1")
						{
							_topoCanvas.addDataXML(new XML(map.get(Constants.XML_KEY_ELEMENTXML)));
							closePanel();
						}
						else
						{
							MessageUtil.showMessage("创建形状对象失败!\n\n(" + map.get(Constants.XML_KEY_MSG) + ")");
						}

					}, function():void
					{
						_loading.loadingEnd();
					}, function():void
					{
						MessageUtil.showMessage("创建形状对象失败!(通信异常)");
					});
			}

			// 编辑后保存
			private function saveModify(shape:ITPShape):void
			{
				commitFormProperties(shape);
				// 元素变化后,要同步更新样式
				shape.feature.style = _topoCanvas.styleFactory.buildStyle(shape);

				var data:String = DataUtil.buildMapXML(Constants.XML_KEY_ELEMENTXML, DataUtil.buildOutputObjects([shape], _topoCanvas.parserFactory));
				data += DataUtil.buildListXML(Constants.XML_KEY_ID, [shape.id]);
				data = DataUtil.buildXML(Constants.TP_MC_MODIFY_ELEMENTS, data);
				log.debug("saveModify: {0}", data);
				_loading.loadingStart();
				_dataSource.notify(_topoCanvas.topoName, data, function(result:String):void
					{
						_loading.loadingEnd();
						var map:IMap = DataUtil.getActionResultMap(new XML(result));
						if (map.get(Constants.XML_KEY_SUCCESS) == "1")
						{
							shape.feature.refresh();
							closePanel();
						}
						else
						{
							MessageUtil.showMessage("修改图片对象失败!\n\n(" + map.get(Constants.XML_KEY_MSG) + ")");
						}

					}, function():void
					{
						_loading.loadingEnd();
					}, function():void
					{
						MessageUtil.showMessage("修改图片对象失败!(通信异常)");
					});
			}

			// 复制后保存
			private function saveCopy(source:ITPShape):void
			{
				MessageUtil.confirm("确认要复制图片对象吗?", function():void
					{
						var shape:ITPShape = new TPShape();
						shape.copyFrom(source);
						shape.visible = 1;
						shape.x = source.x + 100;
						shape.y = source.y + 100;

						var data:String = DataUtil.buildMapXML(Constants.XML_KEY_ELEMENTXML, DataUtil.buildOutputObjects([shape], _topoCanvas.parserFactory));
						data += DataUtil.buildMapXML(Constants.XML_KEY_PID, _topoCanvas.topoId);
						data = DataUtil.buildXML(Constants.TP_MC_ADD_OBJECT, data);
						log.debug("saveCopy: {0}", data);
						_loading.loadingStart();
						_dataSource.notify(_topoCanvas.topoName, data, function(result:String):void
							{
								_loading.loadingEnd();
								var map:IMap = DataUtil.getActionResultMap(new XML(result));
								if (map.get(Constants.XML_KEY_SUCCESS) == "1")
								{
									_topoCanvas.addDataXML(new XML(map.get(Constants.XML_KEY_ELEMENTXML)));
									closePanel();
								}
								else
								{
									MessageUtil.showMessage("复制图片对象失败!\n\n(" + map.get(Constants.XML_KEY_MSG) + ")");
								}

							}, function():void
							{
								_loading.loadingEnd();
							}, function():void
							{
								MessageUtil.showMessage("复制图片对象失败!(通信异常)");
							});
					});
			}

			// 提交页面上的属性到对象中
			private function commitFormProperties(shape:ITPShape):void
			{
				shape.name = StringUtil.trim(shapeName.text);
				shape.labelLayout = labelLayout.selectedItem.value;
				shape.width = int(shapeWidth.text);
				shape.height = int(shapeHeight.text);
				// 下面是扩展属性
				shape.shapeType = shapeType.selectedItem.value;
				shape.fillType = ElementProperties.PROPERTYVALUE_SHAPE_FILL_TYPE_FULLIMAGE; // 填充整张图片
				shape.fillImage = _currentFillImageName;
				shape.borderColor = borderColor.selectedColor;
				shape.borderWidth = borderWidth.value;
				shape.borderAlpha = borderAlpha.value;
				shape.shadowEnable = shadowEnable.selected ? 1 : 0;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<mx:Validator id="fillImageNameValidator"
					  source="{fillImageName}"
					  property="text"
					  required="true"
					  requiredFieldError="请选择图片"/>
		<mx:Validator id="nameValidator"
					  source="{shapeName}"
					  property="text"
					  required="true"
					  requiredFieldError="请输入名称"/>
		<mx:NumberValidator id="widthValidator"
							source="{shapeWidth}"
							property="text"
							allowNegative="false"
							domain="int"
							minValue="1"/>
		<mx:NumberValidator id="heightValidator"
							source="{shapeHeight}"
							property="text"
							allowNegative="false"
							domain="int"
							minValue="1"/>
	</fx:Declarations>
	<mx:Form width="100%">
		<mx:FormItem label="图片">
			<s:HGroup gap="10">
				<s:TextInput id="fillImageName"
							 width="120"
							 text="{_currentFillImageName}"
							 editable="false"/>
				<mx:Image source="{TopoIcons.searchIcon}"
						  toolTip="查找图片"
						  buttonMode="true"
						  click="showMoreIcon_clickHandler(event)"/>
			</s:HGroup>
		</mx:FormItem>
		<mx:FormItem label="名称">
			<s:TextInput id="shapeName"
						 width="120"/>
		</mx:FormItem>
		<mx:FormItem label="名称位置">
			<s:DropDownList id="labelLayout"
							width="120"
							selectedIndex="0">
				<s:dataProvider>
					<s:ArrayList>
						<fx:Object label="顶部"
								   value="{ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_TOP}"/>
						<fx:Object label="底部"
								   value="{ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_BOTTOM}"/>
						<fx:Object label="左侧"
								   value="{ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_LEFT}"/>
						<fx:Object label="右侧"
								   value="{ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_RIGHT}"/>
						<fx:Object label="隐藏"
								   value="{ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_HIDE}"/>
					</s:ArrayList>
				</s:dataProvider>
			</s:DropDownList>
		</mx:FormItem>
		<mx:FormItem label="宽度">
			<s:TextInput id="shapeWidth"
						 width="120"/>
		</mx:FormItem>
		<mx:FormItem label="高度">
			<s:TextInput id="shapeHeight"
						 width="120"/>
		</mx:FormItem>
		<mx:FormItem label="形状">
			<s:DropDownList id="shapeType"
							width="120"
							selectedIndex="0">
				<s:dataProvider>
					<s:ArrayList>
						<fx:Object label="正常"
								   value="{ElementProperties.PROPERTYVALUE_SHAPE_TYPE_RECTANGLE}"/>
						<fx:Object label="倾斜"
								   value="{ElementProperties.PROPERTYVALUE_SHAPE_TYPE_TRAPEZIUM}"/>
					</s:ArrayList>
				</s:dataProvider>
			</s:DropDownList>
		</mx:FormItem>
		<mx:FormItem label="边框粗细">
			<s:NumericStepper id="borderWidth"
							  toolTip="范围: 0 -- 20"
							  width="120"
							  maxChars="3"
							  maximum="20"
							  minimum="0"
							  stepSize="1"
							  allowValueWrap="false"/>
		</mx:FormItem>
		<mx:FormItem label="边框颜色">
			<mx:ColorPicker id="borderColor"/>
		</mx:FormItem>
		<mx:FormItem label="边框透明度">
			<s:HSlider id="borderAlpha"
					   width="120"
					   minimum="0"
					   maximum="1"
					   stepSize="0.1"/>
		</mx:FormItem>
		<mx:FormItem label="阴影效果">
			<s:CheckBox id="shadowEnable"
						label="启用阴影"
						selected="{_currentShadowEnable}"/>
		</mx:FormItem>
		<s:HGroup width="100%"
				  horizontalAlign="center"
				  gap="20">
			<s:Button id="submitBtn"
					  label="确 定"
					  click="save_clickHandler(event)"/>
			<s:Button label="关 闭"
					  click="closePanel();"/>
		</s:HGroup>
	</mx:Form>
</panel:AbstractCEPWindow>
