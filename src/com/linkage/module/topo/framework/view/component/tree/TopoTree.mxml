<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:panel="com.linkage.system.component.panel.*"
				   xmlns:tree="com.linkage.system.component.tree.*"
				   creationComplete="initPanel()"
				   width="100%"
				   height="100%"
				   cornerRadius="6">
	<fx:Script>
		<![CDATA[
			import com.linkage.module.topo.framework.Constants;
			import com.linkage.module.topo.framework.assets.TopoIcons;
			import com.linkage.module.topo.framework.data.IDataSource;
			import com.linkage.module.topo.framework.view.component.TopoCanvas;
			import com.linkage.system.logging.ILogger;
			import com.linkage.system.logging.Log;
			import com.linkage.system.structure.map.ISet;
			import com.linkage.system.structure.map.Set;
			import com.linkage.system.utils.StringUtils;

			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.collections.XMLListCollection;
			import mx.events.ListEvent;
			import mx.events.TreeEvent;

			// log
			private var log:ILogger = Log.getLogger("com.linkage.module.topo.framework.view.component.tree.TopoTree");
			// 画布
			[Bindable]
			private var _topoCanvas:TopoCanvas = null;
			// 数据源
			private var _dataSource:IDataSource = null;
			// 树的拓扑数据
			[Bindable]
			private var _topoTreeData:XMLListCollection = new XMLListCollection();

			private var _topoName:String = "";
			private var _pid:String = Constants.TOP_PID_NET;
			private var _level:int = 1;
			// 拓扑树上显示网元的状态 0:隐藏; 1:显示; 2:全部
			private var _treeVisible:String = null;
			// 名称排序对象
			private var _sort:Sort = new Sort();
			// 已经排过序的id的缓存
			private var _sortedCache:ISet = new Set();

			// 初始化面板
			private function initPanel():void
			{
				_sort.fields = [new SortField("@name")];
			}

			/**
			 * 显示
			 */
			public function show():void
			{
				this.visible = true;
				this.includeInLayout = true;
			}

			/**
			 * 隐藏
			 */
			public function hide():void
			{
				this.visible = false;
				this.includeInLayout = false;
			}

			/**
			 * 启动加载数据逻辑
			 */
			public function start():void
			{
				// 拼装topoSql
				var topoSql:String = "";
				switch (_treeVisible)
				{
					case Constants.TREE_VISIBLE_HIDE:
						topoSql = "visible=0";
						break;
					case Constants.TREE_VISIBLE_SHOW:
						topoSql = "visible=1";
						break;
					default:
						topoSql = "";
						break;
				}
				// <Item id='' name='' type='' icon=''/>
				_dataSource.loadTopoTree(_topoName, _pid, _level, topoSql, function(data:XML):void
					{
						_topoTreeData = initXMLLC(data);
						_sortedCache.clear();
						if (_topoTreeData.length > 0)
						{
							var rootNode:XML = _topoTreeData.getItemAt(0) as XML;
							sortXML(rootNode);
						}
					});

			}

			// XML包括: <Item id='' name='' type='' icon=''/>
			// 这个方法解决了有事节点无名称显示的bug
			private function initXMLLC(data:XML):XMLListCollection
			{
				var xmllist:XMLList = new XMLList(data);
				var xmllc:XMLListCollection = new XMLListCollection(xmllist);
				xmllc.sort = _sort;
				xmllc.refresh();
				return xmllc;
			}

			public function set topoCanvas(value:TopoCanvas):void
			{
				_topoCanvas = value;
			}

			/**
			 * 注入数据源
			 */
			public function set dataSource(value:IDataSource):void
			{
				_dataSource = value;
			}

			public function set topoName(value:String):void
			{
				_topoName = value;
			}

			public function set pid(value:String):void
			{
				_pid = value;
			}

			public function set level(value:int):void
			{
				_level = value;
			}

			/**
			 * 拓扑树上显示网元的状态 0:隐藏; 1:显示; 2:全部
			 */
			public function set treeVisible(value:String):void
			{
				_treeVisible = value;
			}

			// 单击某个节点
			protected function topoTree_itemClickHandler(event:ListEvent):void
			{
				var data:Object = event.itemRenderer.data;
				var id:String = data.@id;
				var name:String = data.@name;
				var type:String = data.@type;
				var topoName:String = data.@toponame;
				if (StringUtils.isEmpty(topoName))
				{
					topoName = _topoName;
				}
				var modelId:String = data["@view.modelId"];
				var modelParam:String = data.@modelParam;
				if (!StringUtils.isEmpty(modelId))
				{
					var xml:XML = data as XML;
					var xmlList:XMLList = xml.attributes();
					var attribute:XML = null;
					var params:Array = [];
					var attrName:String = null;
					for each (attribute in xmlList)
					{
						attrName = String(attribute.name());
						if (StringUtils.startsWithIgnoreCase(attrName, "view."))
						{
							params.push(attrName + ":" + attribute.toString());
						}
					}
					_topoCanvas.loadViewModelTopo(modelId, params.join("#"), topoName);
				}
				else
				{
					_topoCanvas.loadTopo(id, topoName, true, type);
				}
			}

			private function topoTree_itemOpenHandler(event:TreeEvent):void
			{
				var xml:XML = event.item as XML;
				sortXML(event.item as XML);
			}

			// 排序XML的一级子
			private function sortXML(xml:XML):void
			{
				var id:String = xml.@id;
				if (_sortedCache.contains(id))
				{
					// 已经缓存过的id,不需要再次排序
					log.debug("已经缓存过的id(" + id + "),不需要再次排序");
					return;
				}
				_sortedCache.add(id);
				// 先转换成AC排序
				var ac:ArrayCollection = new ArrayCollection();
				for each (var obj:Object in xml.children())
				{
					ac.addItem(obj);
				}
				ac.sort = _sort;
				ac.refresh();
				// 再转换为LC
				var len:int = ac.length;
				var xmllc:XMLListCollection = new XMLListCollection();
				for (var i:int = 0; i < len; i++)
				{
					xmllc.addItem(ac.getItemAt(i));
				}
				// 最后重置XML的一级子
				xml.setChildren(xmllc.source);

				// 验证子项布局
				topoTree.validateNow();
				topoTree.expandItem(xml, false);
				topoTree.expandItem(xml, true);
				topoTree.validateProperties();
				topoTree.validateDisplayList();
			}
		]]>
	</fx:Script>
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:VGroup paddingLeft="5"
			  paddingTop="5"
			  paddingBottom="5"
			  paddingRight="5"
			  width="100%"
			  height="100%">
		<tree:AutoSizeTree id="topoTree"
						   width="100%"
						   height="100%"
						   contentBackgroundAlpha="0"
						   borderVisible="false"
						   labelField="@name"
						   showRoot="true"
						   dataProvider="{_topoTreeData}"
						   disclosureClosedIcon="{TopoIcons.plusSignIcon}"
						   disclosureOpenIcon="{TopoIcons.minusSignIcon}"
						   folderClosedIcon="{null}"
						   folderOpenIcon="{null}"
						   defaultLeafIcon="{null}"
						   itemClick="topoTree_itemClickHandler(event)"
						   itemOpen="topoTree_itemOpenHandler(event)">

		</tree:AutoSizeTree>
	</s:VGroup>
</s:BorderContainer>
