<?xml version="1.0" encoding="utf-8"?>
<panel:AbstractCEPWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
						 xmlns:s="library://ns.adobe.com/flex/spark"
						 xmlns:mx="library://ns.adobe.com/flex/mx"
						 xmlns:panel="com.linkage.module.topo.framework.view.component.*"
						 minHeight="24"
						 width="340"
						 title="{_title}"
						 close="closePanel()"
						 dragable="true"
						 maximizable="false">
	<panel:layout>
		<s:VerticalLayout/>
	</panel:layout>
	<fx:Script>
		<![CDATA[
			import com.linkage.module.topo.framework.Constants;
			import com.linkage.module.topo.framework.assets.TopoIcons;
			import com.linkage.module.topo.framework.controller.event.TopoEvent;
			import com.linkage.module.topo.framework.core.Feature;
			import com.linkage.module.topo.framework.core.model.element.IElement;
			import com.linkage.module.topo.framework.core.model.element.plane.ITPGroup;
			import com.linkage.module.topo.framework.core.model.element.plane.ITPPlane;
			import com.linkage.module.topo.framework.core.model.element.plane.TPGroup;
			import com.linkage.module.topo.framework.core.model.element.point.ITPPoint;
			import com.linkage.module.topo.framework.core.parser.ElementProperties;
			import com.linkage.module.topo.framework.data.IDataSource;
			import com.linkage.module.topo.framework.util.DataUtil;
			import com.linkage.module.topo.framework.util.ImageBuffer;
			import com.linkage.module.topo.framework.util.MessageUtil;
			import com.linkage.module.topo.framework.util.TopoUtil;
			import com.linkage.module.topo.framework.util.loading.ILoadingInfo;
			import com.linkage.module.topo.framework.util.loading.LoadingManager;
			import com.linkage.module.topo.framework.view.component.ICanvasExtendPanel;
			import com.linkage.module.topo.framework.view.component.TopoCanvas;
			import com.linkage.module.topo.framework.view.component.panel.spareparts.IconChooser;
			import com.linkage.system.logging.ILogger;
			import com.linkage.system.logging.Log;
			import com.linkage.system.structure.map.IMap;

			import mx.collections.XMLListCollection;
			import mx.utils.StringUtil;
			private var log:ILogger = Log.getLogger("com.linkage.module.topo.framework.view.component.panel.GroupModifyPanel");
			// 图标缓存类
			private var _imageBuffer:ImageBuffer = ImageBuffer.getInstance();
			// loading
			private var _loading:ILoadingInfo = null;

			// 是否已经创建完成
			private var _creationComplete:Boolean = false;
			[Bindable]
			private var _title:String = null;
			// 数据源
			private var _dataSource:IDataSource = null;
			// 远程图标上下文
			[Bindable]
			private var _iconContext:String = null;
			// 正在编辑的形状对象(为空代表新增)
			private var _modifyGroup:ITPGroup = null;
			// 内部对象id数组
			private var _childids:Array = [];

			// 分组的默认图标
			private var _defaultGroupIcon:String = ElementProperties.DEFAULT_GROUP_CLOSED_ICON;
			// 分组的默认图标的位图数据
			[Bindable]
			private var _defaultGroupIconBitmapData:BitmapData = null;

			// 图标选择面板
			private var _iconChooser:IconChooser = null;
			// 分组创建的位置
			private var _creationPoint:Point = new Point();
			// 选中的对象图标
			private var _selectedGroupIcon:String = null;
			// 默认状态
			private var _defaultStatus:String = null;
			// ------ 当前值 -----
			[Bindable]
			private var _currentParallelogramAngle:Number = 0;
			[Bindable]
			private var _currentIconBitmap:Bitmap = null;
			[Bindable]
			private var _currentFillColorStart:uint = 0;
			[Bindable]
			private var _currentFillColorEnd:uint = 0;
			[Bindable]
			private var _currentShadowEnable:Boolean = true;


			// 关闭面板
			private function closePanel():void
			{
				hide();
			}

			/**
			 * 注入数据源
			 */
			public function set dataSource(value:IDataSource):void
			{
				_dataSource = value;
			}

			/**
			 * 注入图标上下文
			 */
			public function set iconContext(value:String):void
			{
				_iconContext = value;
			}

			/**
			 * 注入画布
			 */
			override public function set topoCanvas(value:TopoCanvas):void
			{
				super.topoCanvas = value;
				_loading = LoadingManager.getInstance().loadingInfo;

				_topoCanvas.addEventListener(TopoEvent.CREATE_GROUP, function(event:TopoEvent):void
					{
						showPanel(event);
					});
				_topoCanvas.addEventListener(TopoEvent.MODIFY_GROUP, function(event:TopoEvent):void
					{
						showPanel(event, event.feature.element as ITPGroup);
					});
			}

			// 展示元素的信息
			private function showPanel(event:TopoEvent, tpGroup:ITPGroup = null):void
			{
				show();
				if (_creationComplete == false)
				{
					_creationComplete = true;
					log.debug("首次打开分组面板,开始初始化...");
					_iconChooser = new IconChooser();
					_iconChooser.iconContext = _iconContext;
					_imageBuffer.loadBitmapData(_iconContext + "/" + _defaultGroupIcon, function(bitmapData:BitmapData, width:Number, height:Number):void
						{
							_defaultGroupIconBitmapData = bitmapData;
						});
					// 查询图标数据
					_dataSource.queryTopoIcons(function(data:XML):void
						{
							var iconList:XMLList = data.child("icon");
							_iconChooser.iconList = new XMLListCollection(iconList);
						});
					// 图标面板选中具体图标
					_iconChooser.initPanel(function(selectedIcon:Object):void
						{
							_currentIconBitmap = new Bitmap(selectedIcon.bitmapData);
							_selectedGroupIcon = selectedIcon.icon;
							_iconChooser.hide();
						});
				}
				_modifyGroup = tpGroup;
				if (_modifyGroup)
				{
					_title = "编辑分组";
					_childids.length = 0;
					_modifyGroup.eachChild(function(id:String, element:ITPPoint):void
						{
							_childids.push(element.id);
						});
					groupName.text = _modifyGroup.name;
					setLabelLayoutProperty(_modifyGroup.labelLayout);
					groupWidth.text = String(_modifyGroup.width);
					groupHeight.text = String(_modifyGroup.height);
					setDefaultStatusProperty(_modifyGroup.defaultStatus);
					_selectedGroupIcon = _modifyGroup.closedIcon;
					_imageBuffer.loadBitmapData(_iconContext + "/" + _modifyGroup.closedIcon, function(bitmapData:BitmapData, width:Number, height:Number):void
						{
							_currentIconBitmap = new Bitmap(bitmapData);
						});
					setShapeTypeProperty(_modifyGroup.shapeType);
					_currentParallelogramAngle = _modifyGroup.parallelogramAngle;
					_currentFillColorStart = _modifyGroup.fillColorStart;
					_currentFillColorEnd = _modifyGroup.fillColorEnd;
					fillAlpha.value = _modifyGroup.fillAlpha;
					borderWidth.value = _modifyGroup.borderWidth;
					borderColor.selectedColor = _modifyGroup.borderColor;
					borderAlpha.value = _modifyGroup.borderAlpha;
					_currentShadowEnable = _modifyGroup.shadowEnable == 1 ? true : false;
				}
				else
				{
					_title = "创建分组";
					_childids.length = 0;
					var minX:Number = Number.MAX_VALUE;
					var minY:Number = Number.MAX_VALUE;
					var maxX:Number = -Number.MAX_VALUE;
					var maxY:Number = -Number.MAX_VALUE;
					event.features.forEach(function(feature:Feature, index:int, array:Array):void
						{
							var element:IElement = feature.element;
							_childids.push(element.id);
							if (element is ITPPlane)
							{
								var plane:ITPPlane = element as ITPPlane;
								minX = Math.min(minX, plane.x - plane.width / 2);
								minY = Math.min(minY, plane.y - plane.height / 2);
								maxX = Math.max(maxX, plane.x + plane.width / 2);
								maxY = Math.max(maxY, plane.y + plane.height / 2);
							}
							else if (element is ITPPoint)
							{
								var point:ITPPoint = element as ITPPoint;
								minX = Math.min(minX, point.x);
								minY = Math.min(minY, point.y);
								maxX = Math.max(maxX, point.x);
								maxY = Math.max(maxY, point.y);
							}
						});
					groupName.text = "";
					setLabelLayoutProperty(ElementProperties.DEFAULT_LABEL_LAYOUT);
					groupWidth.text = String(maxX - minX + 60);
					groupHeight.text = String(maxY - minY + 60);
					_creationPoint.x = (minX + maxX) / 2 + 30;
					_creationPoint.y = (minY + maxY) / 2 + 30;
					setDefaultStatusProperty(ElementProperties.DEFAULT_GROUP_DEFAULT_STATUS);
					_selectedGroupIcon = _defaultGroupIcon;
					initDefaultIconSource();
					setShapeTypeProperty(ElementProperties.DEFAULT_SHAPE_TYPE);
					_currentParallelogramAngle = ElementProperties.DEFAULT_SHAPE_PARALLELOGRAM_ANGLE;
					_currentFillColorStart = ElementProperties.DEFAULT_SHAPE_FILL_COLOR_START;
					_currentFillColorEnd = ElementProperties.DEFAULT_SHAPE_FILL_COLOR_END;
					fillAlpha.value = ElementProperties.DEFAULT_SHAPE_FILL_ALPHA;
					borderWidth.value = ElementProperties.DEFAULT_SHAPE_BORDER_WIDTH;
					borderColor.selectedColor = ElementProperties.DEFAULT_SHAPE_BORDER_COLOR;
					borderAlpha.value = ElementProperties.DEFAULT_SHAPE_BORDER_ALPHA;
					_currentShadowEnable = ElementProperties.DEFAULT_SHAPE_SHADOW_ENABLE == 1 ? true : false;
				}
			}

			// 设置Label布局位置
			private function setLabelLayoutProperty(value:String):void
			{
				switch (value)
				{
					case ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_TOP:
						labelLayout.selectedIndex = 0;
						break;
					case ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_LEFT:
						labelLayout.selectedIndex = 2;
						break;
					case ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_RIGHT:
						labelLayout.selectedIndex = 3;
						break;
					case ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_HIDE:
						labelLayout.selectedIndex = 4;
						break;
					case ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_BOTTOM:
					default:
						labelLayout.selectedIndex = 1;
						break;
				}
			}

			// 使用网段默认图标
			private function initDefaultIconSource():void
			{
				if (_defaultGroupIconBitmapData)
				{
					_currentIconBitmap = new Bitmap(_defaultGroupIconBitmapData);
				}
				else
				{
					setTimeout(initDefaultIconSource, 300);
				}
			}


			// 设置分组的默认状态的属性值
			private function setDefaultStatusProperty(value:String):void
			{
				switch (value)
				{
					case ElementProperties.PROPERTYVALUE_GROUP_DEFAULT_STATUS_OPEN:
						defaultStatus_open.selected = true;
						defaultStatus_open_clickHandler();
						break;
					case ElementProperties.PROPERTYVALUE_GROUP_DEFAULT_STATUS_CLOSE:
					default:
						defaultStatus_close.selected = true;
						defaultStatus_close_clickHandler();
						break;
				}
			}

			// 默认状态:关闭 radio 点击事件
			private function defaultStatus_close_clickHandler():void
			{
				_defaultStatus = ElementProperties.PROPERTYVALUE_GROUP_DEFAULT_STATUS_CLOSE;
			}

			// 默认状态:展开 radio 点击事件
			private function defaultStatus_open_clickHandler():void
			{
				_defaultStatus = ElementProperties.PROPERTYVALUE_GROUP_DEFAULT_STATUS_OPEN;
			}

			// 设置形状类型的属性值
			private function setShapeTypeProperty(value:String):void
			{
				switch (value)
				{
					case ElementProperties.PROPERTYVALUE_SHAPE_TYPE_PARALLELOGRAM:
						shapeType.selectedIndex = 1;
						break;
					case ElementProperties.PROPERTYVALUE_SHAPE_TYPE_CIRCLE:
						shapeType.selectedIndex = 2;
						break;
					case ElementProperties.PROPERTYVALUE_SHAPE_TYPE_ELLIPSE:
						shapeType.selectedIndex = 3;
						break;
					case ElementProperties.PROPERTYVALUE_SHAPE_TYPE_RECTANGLE:
					default:
						shapeType.selectedIndex = 0;
						break;
				}
				shapeType_changeHandler();
			}

			// 捕获形状类型切换
			private function shapeType_changeHandler():void
			{
				if (shapeType.selectedItem.value == ElementProperties.PROPERTYVALUE_SHAPE_TYPE_PARALLELOGRAM)
				{
					// 切换到平行四边形视图
					currentState = "parallelogramState";
				}
				else
				{
					// 切换到矩形视图
					currentState = "rectangleState";
				}
			}

			// 显示更多的图标
			private function showMoreIcon_clickHandler(event:MouseEvent):void
			{
				_iconChooser.show(_topoCanvas);
			}

			// 保存按钮点击
			private function save_clickHandler(event:MouseEvent):void
			{
				if (!checkForm())
				{
					return;
				}
				if (_modifyGroup)
				{
					saveModify(_modifyGroup);
				}
				else
				{
					saveCreate();
				}
			}

			// 验证表单
			private function checkForm():Boolean
			{
				// 检查验证器是否通过
				return TopoUtil.checkValidators([nameValidator, widthValidator, heightValidator]);
			}

			// 新创建后保存
			private function saveCreate():void
			{
				var group:ITPGroup = new TPGroup();
				group.visible = 1;
				group.zindex = 0;
				group.x = _creationPoint.x;
				group.y = _creationPoint.y;
				commitFormProperties(group);

				var data:String = DataUtil.buildMapXML(Constants.XML_KEY_ELEMENTXML, DataUtil.buildOutputGroups([group], _topoCanvas.parserFactory));
				data += DataUtil.buildMapXML(Constants.XML_KEY_PID, _topoCanvas.topoId);
				data += DataUtil.buildListXML(Constants.XML_KEY_CHILDIDS, _childids);
				data = DataUtil.buildXML(Constants.TP_MC_ADD_GROUP, data);
				log.debug("saveCreate: {0}", data);

				_loading.loadingStart();
				_dataSource.notify(_topoCanvas.topoName, data, function(result:String):void
					{
						_loading.loadingEnd();
						var map:IMap = DataUtil.getActionResultMap(new XML(result));
						if (map.get(Constants.XML_KEY_SUCCESS) == "1")
						{
							_topoCanvas.addDataXML(new XML(map.get(Constants.XML_KEY_ELEMENTXML)));
							closePanel();
						}
						else
						{
							MessageUtil.showMessage("创建分组对象失败!\n\n(" + map.get(Constants.XML_KEY_MSG) + ")");
						}

					}, function():void
					{
						_loading.loadingEnd();
					}, function():void
					{
						MessageUtil.showMessage("创建分组对象失败!(通信异常)");
					});
			}

			// 修改后保存
			private function saveModify(group:ITPGroup):void
			{
				commitFormProperties(group);
				// 元素变化后,要同步更新样式
				group.feature.style = _topoCanvas.styleFactory.buildStyle(group);

				var data:String = DataUtil.buildMapXML(Constants.XML_KEY_ELEMENTXML, DataUtil.buildOutputGroups([group], _topoCanvas.parserFactory));
				data += DataUtil.buildListXML(Constants.XML_KEY_ID, [group.id]);
				data += DataUtil.buildListXML(Constants.XML_KEY_CHILDIDS, _childids);
				data = DataUtil.buildXML(Constants.TP_MC_MODIFY_ELEMENTS, data);
				log.debug("saveModify: {0}", data);
				_loading.loadingStart();
				_dataSource.notify(_topoCanvas.topoName, data, function(result:String):void
					{
						var map:IMap = DataUtil.getActionResultMap(new XML(result));
						if (map.get(Constants.XML_KEY_SUCCESS) == "1")
						{
							group.feature.refresh();
							closePanel();
						}
						else
						{
							MessageUtil.showMessage("修改分组对象失败!\n\n(" + map.get(Constants.XML_KEY_MSG) + ")");
						}

					}, function():void
					{
						_loading.loadingEnd();
					}, function():void
					{
						MessageUtil.showMessage("修改分组对象失败!(通信异常)");
					});
			}

			// 提交页面上的属性到对象中
			private function commitFormProperties(group:ITPGroup):void
			{
				group.defaultStatus = _defaultStatus;
				group.closedIcon = _selectedGroupIcon;
				group.name = StringUtil.trim(groupName.text);
				group.labelLayout = labelLayout.selectedItem.value;
				group.width = int(groupWidth.text);
				group.height = int(groupHeight.text);
				// 下面是扩展属性
				group.shapeType = shapeType.selectedItem.value;
				if (parallelogramAngle)
					group.parallelogramAngle = parallelogramAngle.value;
				group.fillColorStart = fillColorStart.selectedColor;
				group.fillColorEnd = fillColorEnd.selectedColor;
				group.fillAlpha = fillAlpha.value;
				group.borderColor = borderColor.selectedColor;
				group.borderWidth = borderWidth.value;
				group.borderAlpha = borderAlpha.value;
				group.shadowEnable = shadowEnable.selected ? 1 : 0;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<mx:Validator id="nameValidator"
					  source="{groupName}"
					  property="text"
					  required="true"
					  requiredFieldError="请输入名称"/>
		<mx:NumberValidator id="widthValidator"
							source="{groupWidth}"
							property="text"
							allowNegative="false"
							domain="int"
							minValue="1"/>
		<mx:NumberValidator id="heightValidator"
							source="{groupHeight}"
							property="text"
							allowNegative="false"
							domain="int"
							minValue="1"/>
	</fx:Declarations>
	<mx:Form width="100%">
		<mx:FormItem label="名称">
			<s:TextInput id="groupName"
						 width="120"/>
		</mx:FormItem>
		<mx:FormItem label="名称位置">
			<s:DropDownList id="labelLayout"
							width="120"
							selectedIndex="0">
				<s:dataProvider>
					<s:ArrayList>
						<fx:Object label="顶部"
								   value="{ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_TOP}"/>
						<fx:Object label="底部"
								   value="{ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_BOTTOM}"/>
						<fx:Object label="左侧"
								   value="{ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_LEFT}"/>
						<fx:Object label="右侧"
								   value="{ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_RIGHT}"/>
						<fx:Object label="隐藏"
								   value="{ElementProperties.PROPERTYVALUE_LABEL_LAYOUT_HIDE}"/>
					</s:ArrayList>
				</s:dataProvider>
			</s:DropDownList>
		</mx:FormItem>
		<mx:FormItem label="宽度">
			<s:TextInput id="groupWidth"
						 width="120"/>
		</mx:FormItem>
		<mx:FormItem label="高度">
			<s:TextInput id="groupHeight"
						 width="120"/>
		</mx:FormItem>
		<mx:FormItem label="默认状态">
			<s:HGroup gap="20">
				<s:RadioButton groupName="defaultStatusRadio"
							   id="defaultStatus_close"
							   label="闭合"
							   click="defaultStatus_close_clickHandler()"/>
				<s:RadioButton groupName="defaultStatusRadio"
							   id="defaultStatus_open"
							   label="展开"
							   click="defaultStatus_open_clickHandler()"/>
			</s:HGroup>
		</mx:FormItem>
		<mx:FormItem label="关闭时图标">
			<s:HGroup gap="20">
				<mx:Image source="{_currentIconBitmap}"
						  width="32"
						  height="32"/>
				<mx:Image source="{TopoIcons.searchIcon}"
						  toolTip="查找图标"
						  buttonMode="true"
						  click="showMoreIcon_clickHandler(event)"/>
			</s:HGroup>
		</mx:FormItem>
		<mx:FormItem label="展开时形状">
			<s:DropDownList id="shapeType"
							width="120"
							selectedIndex="0"
							change="shapeType_changeHandler()">
				<s:dataProvider>
					<s:ArrayList>
						<fx:Object label="矩形"
								   value="{ElementProperties.PROPERTYVALUE_SHAPE_TYPE_RECTANGLE}"/>
						<fx:Object label="平行四边形"
								   value="{ElementProperties.PROPERTYVALUE_SHAPE_TYPE_PARALLELOGRAM}"/>
						<fx:Object label="圆形"
								   value="{ElementProperties.PROPERTYVALUE_SHAPE_TYPE_CIRCLE}"/>
						<fx:Object label="椭圆形"
								   value="{ElementProperties.PROPERTYVALUE_SHAPE_TYPE_ELLIPSE}"/>
					</s:ArrayList>
				</s:dataProvider>
			</s:DropDownList>
		</mx:FormItem>
		<mx:FormItem includeIn="parallelogramState"
					 label="倾斜角">
			<s:NumericStepper id="parallelogramAngle"
							  toolTip="范围: -45 -- 45"
							  width="120"
							  maxChars="3"
							  maximum="45"
							  minimum="-45"
							  stepSize="5"
							  snapInterval="5"
							  allowValueWrap="false"
							  value="{_currentParallelogramAngle}"/>
		</mx:FormItem>
		<mx:FormItem label="填充颜色">
			<s:HGroup gap="20">
				<mx:ColorPicker id="fillColorStart"
								selectedColor="{_currentFillColorStart}"/>
				<mx:ColorPicker id="fillColorEnd"
								selectedColor="{_currentFillColorEnd}"/>
			</s:HGroup>
		</mx:FormItem>
		<mx:FormItem label="填充透明度">
			<s:HSlider id="fillAlpha"
					   width="120"
					   minimum="0"
					   maximum="1"
					   stepSize="0.1"/>
		</mx:FormItem>
		<mx:FormItem label="边框粗细">
			<s:NumericStepper id="borderWidth"
							  toolTip="范围: 0 -- 20"
							  width="120"
							  maxChars="2"
							  maximum="20"
							  minimum="0"
							  stepSize="1"
							  allowValueWrap="false"/>
		</mx:FormItem>
		<mx:FormItem label="边框颜色">
			<mx:ColorPicker id="borderColor"/>
		</mx:FormItem>
		<mx:FormItem label="边框透明度">
			<s:HSlider id="borderAlpha"
					   width="120"
					   minimum="0"
					   maximum="1"
					   stepSize="0.1"/>
		</mx:FormItem>
		<mx:FormItem label="阴影效果">
			<s:CheckBox id="shadowEnable"
						label="启用阴影"
						selected="{_currentShadowEnable}"/>
		</mx:FormItem>
		<s:HGroup width="100%"
				  horizontalAlign="center"
				  gap="20">
			<s:Button id="submitBtn"
					  label="确 定"
					  click="save_clickHandler(event)"/>
			<s:Button label="关 闭"
					  click="closePanel();"/>
		</s:HGroup>
	</mx:Form>
	<!-- 视图状态 -->
	<panel:states>
		<s:State name="parallelogramState"/>
		<s:State name="rectangleState"/>
	</panel:states>
</panel:AbstractCEPWindow>
